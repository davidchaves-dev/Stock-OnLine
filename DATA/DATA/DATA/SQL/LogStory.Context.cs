//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DATA.SQL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StoryGOLDEntities : DbContext
    {
        public StoryGOLDEntities()
            : base("name=StoryGOLDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int InsertMove(string date, string codProd, Nullable<decimal> cant, string movType, string branchCode)
        {
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var codProdParameter = codProd != null ?
                new ObjectParameter("codProd", codProd) :
                new ObjectParameter("codProd", typeof(string));
    
            var cantParameter = cant.HasValue ?
                new ObjectParameter("cant", cant) :
                new ObjectParameter("cant", typeof(decimal));
    
            var movTypeParameter = movType != null ?
                new ObjectParameter("movType", movType) :
                new ObjectParameter("movType", typeof(string));
    
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("branchCode", branchCode) :
                new ObjectParameter("branchCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMove", dateParameter, codProdParameter, cantParameter, movTypeParameter, branchCodeParameter);
        }
    
        public virtual int InsertStock(string date, Nullable<long> page, string codProd, string codSuc, Nullable<decimal> cant)
        {
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("page", page) :
                new ObjectParameter("page", typeof(long));
    
            var codProdParameter = codProd != null ?
                new ObjectParameter("codProd", codProd) :
                new ObjectParameter("codProd", typeof(string));
    
            var codSucParameter = codSuc != null ?
                new ObjectParameter("codSuc", codSuc) :
                new ObjectParameter("codSuc", typeof(string));
    
            var cantParameter = cant.HasValue ?
                new ObjectParameter("cant", cant) :
                new ObjectParameter("cant", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertStock", dateParameter, pageParameter, codProdParameter, codSucParameter, cantParameter);
        }
    }
}
