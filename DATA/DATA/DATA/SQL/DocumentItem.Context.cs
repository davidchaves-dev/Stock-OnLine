//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DATA.SQL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LibertadSADetalleFacturaEntities : DbContext
    {
        public LibertadSADetalleFacturaEntities()
            : base("name=LibertadSADetalleFacturaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int Insert_DocumentItem(string code, Nullable<decimal> cant, string docCode, Nullable<bool> exclusive, Nullable<bool> ecommerce)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var cantParameter = cant.HasValue ?
                new ObjectParameter("Cant", cant) :
                new ObjectParameter("Cant", typeof(decimal));
    
            var docCodeParameter = docCode != null ?
                new ObjectParameter("DocCode", docCode) :
                new ObjectParameter("DocCode", typeof(string));
    
            var exclusiveParameter = exclusive.HasValue ?
                new ObjectParameter("Exclusive", exclusive) :
                new ObjectParameter("Exclusive", typeof(bool));
    
            var ecommerceParameter = ecommerce.HasValue ?
                new ObjectParameter("Ecommerce", ecommerce) :
                new ObjectParameter("Ecommerce", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_DocumentItem", codeParameter, cantParameter, docCodeParameter, exclusiveParameter, ecommerceParameter);
        }
    
        public virtual int Insert_DocumentItem1(string code, Nullable<decimal> cant, string docCode, Nullable<bool> exclusive, Nullable<bool> ecommerce)
        {
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var cantParameter = cant.HasValue ?
                new ObjectParameter("Cant", cant) :
                new ObjectParameter("Cant", typeof(decimal));
    
            var docCodeParameter = docCode != null ?
                new ObjectParameter("DocCode", docCode) :
                new ObjectParameter("DocCode", typeof(string));
    
            var exclusiveParameter = exclusive.HasValue ?
                new ObjectParameter("Exclusive", exclusive) :
                new ObjectParameter("Exclusive", typeof(bool));
    
            var ecommerceParameter = ecommerce.HasValue ?
                new ObjectParameter("Ecommerce", ecommerce) :
                new ObjectParameter("Ecommerce", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_DocumentItem1", codeParameter, cantParameter, docCodeParameter, exclusiveParameter, ecommerceParameter);
        }
    }
}
